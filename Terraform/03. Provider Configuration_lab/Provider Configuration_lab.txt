Lab 3: Provider Configuration
Lab Objectives
By the end of this lab, you will be able to:

Configure the AWS provider in Terraform with proper authentication
Set up AWS credentials using environment variables for secure access
Create and manage basic Terraform configuration files
Provision AWS resources (S3 bucket) using Terraform
Understand best practices for provider configuration and credential management
Execute Terraform commands to initialize, plan, and apply infrastructure changes
Prerequisites
Before starting this lab, you should have:

Basic understanding of cloud computing concepts
Familiarity with Linux command line operations
Basic knowledge of text editors (nano, vim, or similar)
Understanding of AWS services (specifically S3)
Completion of previous Terraform basics labs or equivalent knowledge
Lab Environment
Al Nafi provides Linux-based cloud machines for this lab. Simply click Start Lab to access your dedicated Linux machine. The provided machine is bare metal with no pre-installed tools, so you will install all required tools during the lab exercises.

Task 1: Install Required Tools
Subtask 1.1: Install Terraform
First, we need to install Terraform on our Linux machine.

# Update the system package list
sudo apt update

# Install required packages
sudo apt install -y gnupg software-properties-common curl

# Add HashiCorp GPG key
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -

# Add HashiCorp repository
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

# Update package list again
sudo apt update

# Install Terraform
sudo apt install terraform

# Verify installation
terraform version
Subtask 1.2: Install AWS CLI (Optional but Recommended)
While not strictly required for this lab, AWS CLI helps with credential verification.

# Install AWS CLI
sudo apt install awscli -y

# Verify installation
aws --version
Task 2: Set Up AWS Credentials Using Environment Variables
Subtask 2.1: Create AWS Access Keys
Note: For this lab, you will need AWS access keys. In a real-world scenario, you would obtain these from your AWS account's IAM service. For educational purposes, we'll show you how to set them up.

Subtask 2.2: Configure Environment Variables
Create a secure way to store your AWS credentials using environment variables.

# Create a directory for our Terraform project
mkdir ~/terraform-provider-lab
cd ~/terraform-provider-lab

# Create a script to set environment variables
nano aws-credentials.sh
Add the following content to the aws-credentials.sh file:

#!/bin/bash
# AWS Credentials - Replace with your actual credentials
export AWS_ACCESS_KEY_ID="your-access-key-here"
export AWS_SECRET_ACCESS_KEY="your-secret-key-here"
export AWS_DEFAULT_REGION="us-east-1"

echo "AWS credentials have been set as environment variables"
echo "Region: $AWS_DEFAULT_REGION"
Make the script executable and source it:

# Make the script executable
chmod +x aws-credentials.sh

# Source the script to set environment variables
source ./aws-credentials.sh

# Verify environment variables are set
echo "Access Key ID: $AWS_ACCESS_KEY_ID"
echo "Region: $AWS_DEFAULT_REGION"
Subtask 2.3: Verify Credentials (Optional)
If you installed AWS CLI, you can verify your credentials:

# Test AWS credentials
aws sts get-caller-identity
Task 3: Configure AWS Provider in Terraform
Subtask 3.1: Create Provider Configuration File
Create the main provider configuration file:

# Create provider.tf file
nano provider.tf
Add the following content to provider.tf:

# Configure the AWS Provider
terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure AWS Provider with region
provider "aws" {
  region = var.aws_region
  
  # Credentials will be automatically picked up from environment variables:
  # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
}
Subtask 3.2: Create Variables File
Create a variables file to make our configuration more flexible:

# Create variables.tf file
nano variables.tf
Add the following content to variables.tf:

# AWS Region Variable
variable "aws_region" {
  description = "AWS region for resources"
  type        = string
  default     = "us-east-1"
}

# S3 Bucket Name Variable
variable "bucket_name" {
  description = "Name of the S3 bucket to create"
  type        = string
  default     = "my-terraform-lab-bucket"
}

# Environment Tag Variable
variable "environment" {
  description = "Environment name for resource tagging"
  type        = string
  default     = "lab"
}
Subtask 3.3: Create Terraform Values File
Create a terraform.tfvars file to set specific values:

# Create terraform.tfvars file
nano terraform.tfvars
Add the following content to terraform.tfvars:

# AWS Configuration
aws_region = "us-east-1"

# S3 Bucket Configuration
bucket_name = "terraform-lab-bucket-12345"  # Change this to a unique name

# Environment
environment = "development"
Task 4: Create S3 Bucket Configuration
Subtask 4.1: Create Main Configuration File
Create the main Terraform configuration file for our S3 bucket:

# Create main.tf file
nano main.tf
Add the following content to main.tf:

# Create an S3 bucket
resource "aws_s3_bucket" "lab_bucket" {
  bucket = var.bucket_name

  tags = {
    Name        = var.bucket_name
    Environment = var.environment
    Purpose     = "Terraform Lab"
    CreatedBy   = "Terraform"
  }
}

# Configure S3 bucket versioning
resource "aws_s3_bucket_versioning" "lab_bucket_versioning" {
  bucket = aws_s3_bucket.lab_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

# Configure S3 bucket server-side encryption
resource "aws_s3_bucket_server_side_encryption_configuration" "lab_bucket_encryption" {
  bucket = aws_s3_bucket.lab_bucket.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

# Block public access to the bucket
resource "aws_s3_bucket_public_access_block" "lab_bucket_pab" {
  bucket = aws_s3_bucket.lab_bucket.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}
Subtask 4.2: Create Outputs File
Create an outputs file to display important information:

# Create outputs.tf file
nano outputs.tf
Add the following content to outputs.tf:

# Output the bucket name
output "bucket_name" {
  description = "Name of the created S3 bucket"
  value       = aws_s3_bucket.lab_bucket.bucket
}

# Output the bucket ARN
output "bucket_arn" {
  description = "ARN of the created S3 bucket"
  value       = aws_s3_bucket.lab_bucket.arn
}

# Output the bucket region
output "bucket_region" {
  description = "Region where the S3 bucket was created"
  value       = aws_s3_bucket.lab_bucket.region
}

# Output the bucket domain name
output "bucket_domain_name" {
  description = "Domain name of the S3 bucket"
  value       = aws_s3_bucket.lab_bucket.bucket_domain_name
}
Task 5: Initialize and Deploy Terraform Configuration
Subtask 5.1: Initialize Terraform
Initialize the Terraform working directory:

# Make sure environment variables are still set
source ./aws-credentials.sh

# Initialize Terraform
terraform init
You should see output indicating that Terraform has been successfully initialized and the AWS provider has been downloaded.

Subtask 5.2: Validate Configuration
Validate that your Terraform configuration is syntactically correct:

# Validate the configuration
terraform validate
Subtask 5.3: Format Configuration Files
Format your Terraform files for consistency:

# Format all .tf files
terraform fmt
Subtask 5.4: Plan the Deployment
Create an execution plan to see what Terraform will do:

# Create and review the execution plan
terraform plan
Review the output carefully. You should see that Terraform plans to create:

1 S3 bucket
1 S3 bucket versioning configuration
1 S3 bucket encryption configuration
1 S3 bucket public access block
Subtask 5.5: Apply the Configuration
Deploy the infrastructure:

# Apply the configuration
terraform apply
When prompted, type yes to confirm the deployment.

Subtask 5.6: Verify the Deployment
Check that your resources were created successfully:

# Show the current state
terraform show

# List all resources in the state
terraform state list

# Get specific output values
terraform output
Task 6: Manage and Clean Up Resources
Subtask 6.1: Inspect Created Resources
Let's examine what we've created:

# Show detailed information about the bucket
terraform state show aws_s3_bucket.lab_bucket

# Show all outputs
terraform output
Subtask 6.2: Make a Configuration Change
Let's modify our configuration to add another tag:

# Edit main.tf to add another tag
nano main.tf
Modify the tags section in the aws_s3_bucket resource:

  tags = {
    Name        = var.bucket_name
    Environment = var.environment
    Purpose     = "Terraform Lab"
    CreatedBy   = "Terraform"
    LastModified = "2024"  # Add this line
  }
Apply the change:

# Plan the change
terraform plan

# Apply the change
terraform apply
Subtask 6.3: Clean Up Resources
When you're done with the lab, clean up the resources to avoid charges:

# Destroy all resources
terraform destroy
When prompted, type yes to confirm the destruction.

Verify that resources have been destroyed:

# Check that no resources remain
terraform show
Troubleshooting Tips
Common Issues and Solutions
Issue 1: Authentication Errors

# If you get authentication errors, verify your environment variables
echo $AWS_ACCESS_KEY_ID
echo $AWS_SECRET_ACCESS_KEY

# Re-source your credentials if needed
source ./aws-credentials.sh
Issue 2: Bucket Name Already Exists

# S3 bucket names must be globally unique
# Edit terraform.tfvars and change the bucket_name to something unique
nano terraform.tfvars
Issue 3: Permission Denied Errors

# Ensure your AWS credentials have the necessary permissions:
# - s3:CreateBucket
# - s3:DeleteBucket
# - s3:GetBucketVersioning
# - s3:PutBucketVersioning
# - s3:GetBucketEncryption
# - s3:PutBucketEncryption
Issue 4: Terraform State Issues

# If you encounter state issues, you can refresh the state
terraform refresh

# Or reinitialize if necessary
rm -rf .terraform
terraform init
Key Concepts Learned
Provider Configuration
Provider Block: Defines which cloud provider to use and its configuration
Required Providers: Specifies provider source and version constraints
Authentication: Using environment variables for secure credential management
Terraform Workflow
terraform init: Downloads providers and initializes the working directory
terraform validate: Checks configuration syntax
terraform plan: Shows what changes will be made
terraform apply: Executes the planned changes
terraform destroy: Removes all managed resources
Best Practices Demonstrated
Using environment variables for sensitive data
Organizing configuration into multiple files
Using variables for flexibility
Implementing proper resource tagging
Following security best practices (encryption, public access blocking)
Conclusion
In this lab, you successfully configured the AWS provider for Terraform and created a complete infrastructure deployment. You learned how to:

Set up secure authentication using environment variables instead of hardcoding credentials
Structure Terraform configurations using multiple files (provider.tf, variables.tf, main.tf, outputs.tf)
Create and manage AWS S3 buckets with proper security configurations
Execute the complete Terraform workflow from initialization to deployment and cleanup
This foundation is crucial for managing cloud infrastructure as code. The provider configuration skills you've learned here apply to any cloud provider and form the basis for more complex infrastructure deployments. The security practices demonstrated, particularly using environment variables for credentials, are essential for real-world Terraform usage.

Understanding provider configuration is fundamental to Terraform success, as it determines how Terraform communicates with your cloud provider and manages your infrastructure resources. The hands-on experience with the complete Terraform workflow prepares you for managing production infrastructure deployments.
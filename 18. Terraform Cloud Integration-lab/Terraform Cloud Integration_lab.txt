Lab 18: Terraform Cloud Integration
Lab Objectives
By the end of this lab, you will be able to:

Set up and configure a Terraform Cloud workspace
Connect your local Terraform configuration to Terraform Cloud
Push Terraform configurations to Terraform Cloud
Execute remote plans and applies using Terraform Cloud
Understand the benefits of remote state management and collaboration
Configure version control integration with Terraform Cloud
Prerequisites
Before starting this lab, you should have:

Basic understanding of Terraform concepts (resources, providers, state)
Familiarity with Linux command line operations
Basic knowledge of Git version control
Understanding of Infrastructure as Code (IaC) principles
A GitHub account (free tier is sufficient)
A Terraform Cloud account (free tier is sufficient)
Lab Environment
Al Nafi provides Linux-based cloud machines for this lab. Simply click Start Lab to access your dedicated Linux machine. The provided machine is bare metal with no pre-installed tools, so you will install all required tools during the lab exercises.

Task 1: Environment Setup and Tool Installation
Subtask 1.1: Install Required Tools
First, update your system and install the necessary tools.

# Update system packages
sudo apt update && sudo apt upgrade -y

# Install curl and wget
sudo apt install -y curl wget unzip git

# Install Terraform
wget https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip
unzip terraform_1.6.6_linux_amd64.zip
sudo mv terraform /usr/local/bin/
rm terraform_1.6.6_linux_amd64.zip

# Verify Terraform installation
terraform version
Subtask 1.2: Install and Configure Git
# Configure Git with your information
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Verify Git configuration
git config --list
Subtask 1.3: Create Project Directory Structure
# Create main project directory
mkdir -p ~/terraform-cloud-lab
cd ~/terraform-cloud-lab

# Create subdirectories for organization
mkdir -p {configurations,scripts,docs}

# Initialize as Git repository
git init
Task 2: Set up Terraform Cloud Workspace
Subtask 2.1: Create Terraform Cloud Account and Organization
Open a web browser and navigate to https://app.terraform.io
Sign up for a free Terraform Cloud account if you don't have one
Create a new organization or use an existing one
Note down your organization name for later use
Subtask 2.2: Generate Terraform Cloud API Token
In Terraform Cloud, click on your profile picture in the top right
Select User Settings
Click on Tokens in the left sidebar
Click Create an API token
Enter a description like "Lab 18 Token"
Copy the generated token and save it securely
Subtask 2.3: Configure Terraform CLI Authentication
# Create Terraform CLI configuration directory
mkdir -p ~/.terraform.d

# Create credentials file
cat > ~/.terraform.d/credentials.tfrc.json << 'EOF'
{
  "credentials": {
    "app.terraform.io": {
      "token": "YOUR_TERRAFORM_CLOUD_TOKEN_HERE"
    }
  }
}
EOF

# Replace YOUR_TERRAFORM_CLOUD_TOKEN_HERE with your actual token
# Use a text editor to update the token
nano ~/.terraform.d/credentials.tfrc.json
Subtask 2.4: Create Initial Terraform Configuration
# Navigate to configurations directory
cd ~/terraform-cloud-lab/configurations

# Create main Terraform configuration file
cat > main.tf << 'EOF'
terraform {
  required_version = ">= 1.0"
  
  cloud {
    organization = "YOUR_ORG_NAME"
    
    workspaces {
      name = "terraform-cloud-lab"
    }
  }
  
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.4"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.4"
    }
  }
}

# Random string resource
resource "random_string" "lab_id" {
  length  = 8
  special = false
  upper   = false
}

# Local file resource
resource "local_file" "lab_output" {
  filename = "${path.module}/lab-output-${random_string.lab_id.result}.txt"
  content  = <<-EOT
    Terraform Cloud Lab Output
    ==========================
    Lab ID: ${random_string.lab_id.result}
    Timestamp: ${timestamp()}
    Workspace: terraform-cloud-lab
    Organization: YOUR_ORG_NAME
    
    This file was created using Terraform Cloud remote execution!
  EOT
}

# Output values
output "lab_id" {
  description = "Unique identifier for this lab run"
  value       = random_string.lab_id.result
}

output "output_file" {
  description = "Path to the generated output file"
  value       = local_file.lab_output.filename
}
EOF

# Replace YOUR_ORG_NAME with your actual Terraform Cloud organization name
nano main.tf
Subtask 2.5: Create Variables Configuration
# Create variables file
cat > variables.tf << 'EOF'
variable "environment" {
  description = "Environment name for the lab"
  type        = string
  default     = "development"
}

variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "terraform-cloud-lab"
}

variable "tags" {
  description = "Common tags for resources"
  type        = map(string)
  default = {
    Environment = "development"
    Project     = "terraform-cloud-lab"
    ManagedBy   = "terraform-cloud"
  }
}
EOF
Task 3: Push Configurations to Terraform Cloud
Subtask 3.1: Initialize Terraform with Cloud Backend
# Initialize Terraform (this will prompt for workspace creation)
terraform init
When prompted, select yes to create the new workspace in Terraform Cloud.

Subtask 3.2: Create GitHub Repository (Optional but Recommended)
# Add all files to Git
git add .

# Create initial commit
git commit -m "Initial Terraform Cloud configuration"

# Create .gitignore file
cat > .gitignore << 'EOF'
# Terraform files
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
terraform.tfvars
*.tfvars

# OS files
.DS_Store
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo
EOF

# Add and commit .gitignore
git add .gitignore
git commit -m "Add .gitignore file"
Subtask 3.3: Configure Workspace Settings in Terraform Cloud
Navigate to your Terraform Cloud workspace in the web browser
Go to Settings > General
Set the Execution Mode to Remote
Set the Apply Method to Manual apply for learning purposes
Save the settings
Subtask 3.4: Set Workspace Variables
In your workspace, go to Variables
Add the following Terraform variables:
environment: development
project_name: terraform-cloud-lab
Add any environment variables if needed
Save the variables
Task 4: Use Remote Plans and Applies from Terraform Cloud
Subtask 4.1: Execute Remote Plan
# Run terraform plan (this will execute remotely)
terraform plan
Observe how the plan execution happens in Terraform Cloud rather than locally.

Subtask 4.2: Monitor Plan in Terraform Cloud UI
Open your workspace in Terraform Cloud
Navigate to Runs
Click on the latest run to see detailed logs
Review the plan output and proposed changes
Subtask 4.3: Execute Remote Apply
# Run terraform apply (this will execute remotely)
terraform apply
When prompted, type yes to confirm the apply operation.

Subtask 4.4: Verify Remote State Management
# Try to view state (note: state is stored remotely)
terraform show

# List resources in state
terraform state list

# View specific resource
terraform state show random_string.lab_id
Subtask 4.5: Check Generated Files
# List files in current directory
ls -la

# View the generated output file
cat lab-output-*.txt
Task 5: Advanced Terraform Cloud Features
Subtask 5.1: Create Additional Configuration
# Create a more complex configuration
cat > advanced.tf << 'EOF'
# Additional random resources
resource "random_password" "lab_password" {
  length  = 16
  special = true
}

resource "random_uuid" "lab_uuid" {}

# Local file with more complex content
resource "local_file" "advanced_output" {
  filename = "${path.module}/advanced-${random_string.lab_id.result}.json"
  content = jsonencode({
    lab_info = {
      id          = random_string.lab_id.result
      uuid        = random_uuid.lab_uuid.result
      environment = var.environment
      project     = var.project_name
      timestamp   = timestamp()
      tags        = var.tags
    }
    security = {
      password_length = length(random_password.lab_password.result)
      has_special     = random_password.lab_password.special
    }
  })
}

# Additional outputs
output "lab_uuid" {
  description = "UUID for this lab session"
  value       = random_uuid.lab_uuid.result
}

output "advanced_file" {
  description = "Path to the advanced JSON output file"
  value       = local_file.advanced_output.filename
}
EOF
Subtask 5.2: Plan and Apply Changes
# Plan the changes
terraform plan

# Apply the changes
terraform apply
Subtask 5.3: View Updated Outputs
# View all outputs
terraform output

# View specific output
terraform output lab_id
terraform output lab_uuid

# Check the generated JSON file
cat advanced-*.json | python3 -m json.tool
Task 6: Workspace Management and Collaboration
Subtask 6.1: Create Terraform Variables File
# Create terraform.tfvars.example file
cat > terraform.tfvars.example << 'EOF'
# Example variables file for Terraform Cloud Lab
environment  = "development"
project_name = "terraform-cloud-lab"

tags = {
  Environment = "development"
  Project     = "terraform-cloud-lab"
  ManagedBy   = "terraform-cloud"
  Owner       = "lab-student"
}
EOF
Subtask 6.2: Test Workspace Variables Override
In Terraform Cloud workspace, go to Variables
Update the environment variable to production
Run a new plan to see how workspace variables override defaults
# Run plan to see variable changes
terraform plan
Subtask 6.3: View Run History
In Terraform Cloud, navigate to Runs
Review the history of all runs
Click on different runs to compare changes
Notice how each run is tracked and auditable
Task 7: Cleanup and Resource Management
Subtask 7.1: Destroy Resources
# Plan destroy operation
terraform plan -destroy

# Execute destroy
terraform destroy
Subtask 7.2: Verify Cleanup
# Check that local files are removed
ls -la *.txt *.json

# Verify state is empty
terraform show
Subtask 7.3: Final Git Commit
# Add all changes to Git
git add .

# Commit final state
git commit -m "Complete Terraform Cloud integration lab"

# View Git log
git log --oneline
Troubleshooting Common Issues
Issue 1: Authentication Problems
If you encounter authentication issues:

# Verify credentials file
cat ~/.terraform.d/credentials.tfrc.json

# Test authentication
terraform login
Issue 2: Workspace Not Found
If Terraform cannot find your workspace:

Verify organization name in main.tf
Check workspace name spelling
Ensure workspace exists in Terraform Cloud
Issue 3: Remote Execution Failures
If remote execution fails:

Check workspace execution mode is set to "Remote"
Verify all required variables are set in the workspace
Review run logs in Terraform Cloud UI
Issue 4: State Lock Issues
If you encounter state lock issues:

# Force unlock (use with caution)
terraform force-unlock LOCK_ID
Key Concepts Learned
Remote State Management
Terraform Cloud automatically manages your state file remotely, providing:

State locking to prevent concurrent modifications
State versioning for rollback capabilities
Secure storage with encryption at rest and in transit
Remote Execution
All Terraform operations run in Terraform Cloud's infrastructure:

Consistent environment across team members
Audit logging of all operations
Policy enforcement capabilities
Workspace Variables
Variables can be set at the workspace level:

Terraform variables for configuration
Environment variables for provider authentication
Sensitive variables are encrypted and hidden
Collaboration Features
Terraform Cloud enables team collaboration:

Run approval workflows
Comment and discussion on runs
Role-based access control
Conclusion
In this lab, you successfully integrated Terraform with Terraform Cloud, experiencing the benefits of remote state management and execution. You learned how to:

Set up and configure a Terraform Cloud workspace
Authenticate your local Terraform CLI with Terraform Cloud
Push configurations and execute remote plans and applies
Manage workspace variables and settings
Monitor and audit Terraform operations through the web interface
This integration is crucial for production environments and team collaboration, as it provides centralized state management, consistent execution environments, and comprehensive audit trails. Terraform Cloud's remote execution ensures that all team members work with the same Terraform version and provider configurations, reducing the "works on my machine" problem common in infrastructure management.

The skills you've developed in this lab form the foundation for implementing Infrastructure as Code in enterprise environments, where collaboration, security, and auditability are essential requirements.